# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none

pool:
   name: UITestPoolAzure

jobs:
  - job: Test
    timeoutInMinutes: 180
    steps:
      - task: NodeTool@0
        inputs:
          versionSource: 'spec'
          versionSpec: '20.x'
          checkLatest: true
      - task: Npm@1
        inputs:
          command: 'custom'
          customCommand: 'install chromedriver --detect_chromedriver_version'
      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: |
            $sharedDirectory = "C:\Shared"

            Write-Host Deleting old files
            Get-ChildItem -Path $sharedDirectory | ForEach-Object -Process { 
              if($_.attributes -eq "Directory") {
                Remove-Item -Path $_.FullName -Recurse -Force
              } else {
                Remove-Item -Path $_.FullName -Force
              }
            }
      - task: CopyFiles@2
        inputs:
          SourceFolder: '$(Agent.BuildDirectory)/s/node_modules/chromedriver/lib/chromedriver'
          Contents: 'chromedriver.exe'
          TargetFolder: 'C:/Shared'
      - task: AzureCLI@2
        inputs:
          azureSubscription: 'MD-VS'
          scriptType: 'pscore'
          scriptLocation: 'inlineScript'
          inlineScript: |
            $env:AZURE_DEVOPS_EXT_PAT = "$(System.AccessToken)"
            $numMachines = 8
            $sharedDirectory = "C:\Shared"
            $targetDirectory = "$sharedDirectory\Build"
            $targetDirectory2 = "\\10.0.0.4\Shared\Build"
            $uitestsDirectory = "${targetDirectory}\UITests"
            $vstest = "C:\Users\testuser\Desktop\TestPlatform\vstest.console.exe"
            
            Remove-Item -Path $targetDirectory -Force -Recurse -ErrorAction Ignore
            $buildId = az pipelines runs list --org https://dev.azure.com/MooDPlatform/ --project MooD --query "[?definition.name=='MooD Trunk Nightly Build'].buildNumber | [0]"
            
            Write-Host Downloading build artifacts
            az pipelines runs artifact download --artifact-name CPPTestsZip --path $targetDirectory --run-id $buildId --org https://dev.azure.com/MooDPlatform/ --project MooD
            az pipelines runs artifact download --artifact-name UITestsZip --path $targetDirectory --run-id $buildId --org https://dev.azure.com/MooDPlatform/ --project MooD
            az pipelines runs artifact download --artifact-name MooD --path $targetDirectory --run-id $buildId --org https://dev.azure.com/MooDPlatform/ --project MooD
            
            Write-Host Extracting UITests locally
            Expand-Archive -LiteralPath "${targetDirectory}\UITests.zip" -DestinationPath $uitestsDirectory -Force

            Write-Host Listing test names
            & $vstest "${uitestsDirectory}\Test_UI.dll" /ListFullyQualifiedTests "/ListTestsTargetPath:${uitestsDirectory}\TestNames.txt"
            $tests = Get-Content "${uitestsDirectory}\TestNames.txt"

            Write-Host Splitting test names per machine
            $splitTests = @($null) * $numMachines
            1..$numMachines | ForEach-Object { $splitTests[$_ - 1] = [System.Collections.Generic.List[string]]::new() }
            0..($tests.Length - 1) | ForEach-Object { $splitTests[$_ % $numMachines].Add($tests[$_]) }
            0..($splitTests.Length - 1) | ForEach-Object { $splitTests[$_] = $splitTests[$_] -join '|' }

            0..($splitTests.Length - 1) | ForEach-Object { 
                Write-Host $splitTests[$_]
            }

            Write-Host Creating VMs
            1..$numMachines | ForEach-Object -Parallel { 
              az vm create --resource-group ui-tests --name vm-ui-tests-$_ --image "/subscriptions/0c8dec2a-b188-4313-a3e2-70f255ada0b9/resourceGroups/ui-tests/providers/Microsoft.Compute/galleries/UITestsGallery/images/UITestsDefinition" --specialized --license-type Windows_Client --admin-password Ts0rg123_Ts0rg123 --admin-username testuser --security-type TrustedLaunch --size Standard_D2s_v3 --public-ip-address '""' --os-disk-delete-option delete --nic-delete-option delete
            } -ThrottleLimit $numMachines

            Write-Host Getting ips
            $ips = [System.Collections.ArrayList]@()
            1..$numMachines | ForEach-Object { 
                $ip = az vm list-ip-addresses --resource-group ui-tests --name vm-ui-tests-$_ --query [0].virtualMachine.network.privateIpAddresses[0] 
                $ips.Add($ip.Replace('"', '')) | Out-Null
            }

            Start-Sleep -Seconds 120

            Write-Host Trusting ips
            $ipsStr = $ips -join ','
            $ipsStr = '"' + $ipsStr + '"'
            winrm set winrm/config/client "@{TrustedHosts=$ipsStr}"

            $script = @"
            Add-Type -AssemblyName System.Windows.Forms
            `$screen = [System.Windows.Forms.Screen]::PrimaryScreen
            `$screen.Bounds.Width
            `$screen.Bounds.Height
            `$resPath = "C:\Temp\Res_.txt"
            Out-File -FilePath `$resPath -InputObject `$screen
            `$resPath = "\\10.0.0.4\Shared\Res_.txt"
            Out-File -FilePath `$resPath -InputObject `$screen

            Write-Host Installing MooD
            Copy-item -Path "\\10.0.0.4\Shared" -Destination "C:\Temp" -Recurse

            `$installerFilename = "C:\Temp\Build\MooD17.006.000_BusinessArchitectSetup.exe"
            `$processStartInfo = new-object "Diagnostics.ProcessStartInfo"
            `$processStartInfo.FileName = `$installerFilename
            `$processStartInfo.Arguments = "/quiet"
            `$process = [Diagnostics.Process]::Start(`$processStartInfo)
            `$process.WaitForExit();
              
            Write-Host Extracting CppTests
            Expand-Archive -LiteralPath "C:\Temp\Build\CppTests.zip" -DestinationPath "C:\Program Files (x86)\MooD\17" -Force
                          
            Write-Host Extracting UITests
            Expand-Archive -LiteralPath "C:\Temp\Build\UITests.zip" -DestinationPath "C:\Program Files (x86)\MooD\17" -Force

            Write-Host Replacing Chromedriver
            Copy-item -Path "C:\Temp\chromedriver.exe" -Destination "C:\Program Files (x86)\MooD\17"

            Write-Host Installing licence
            [microsoft.win32.registry]::SetValue("HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\MooD International\Licence\17.0", "licencepath", "C:\Temp\Build\Internallicence.xml")

            Write-Host Creating rep
            & "C:\Program Files (x86)\MooD\17\MooDRepositoryManager.com" addserver /server localhost 
            & "C:\Program Files (x86)\MooD\17\MooDRepositoryManager.com" create /server "localhost" /name "17Test1a"

            Write-Host Running tests
            "@

            $jobs = [System.Collections.ArrayList]@()

            for ($i = 0; $i -lt $numMachines; $i++) {
                $job = Invoke-Command -ComputerName $ips[$i] -ScriptBlock {
                    Out-File -FilePath C:\Users\testuser\Desktop\RunTests.ps1 -InputObject $args[0]
                    $i = $args[1]
                    $tests = $args[2]
                    
                    $vstest = '& "C:\Users\testuser\Desktop\TestPlatform\vstest.console.exe" "C:\Program Files (x86)\MooD\17\Test_UI.dll" "/TestCaseFilter:' + "$tests" + '" "/Logger:trx;LogFileName=\\10.0.0.4\Shared\Tests_' + "$i" + '.trx"'
                    Add-Content -Path C:\Users\testuser\Desktop\RunTests.ps1 -Value $vstest

                    Start-ScheduledTask -TaskName "Run Tests"
                    do{
                        $state = Get-ScheduledTask -TaskName "Run Tests"|select -expand State
                        Start-Sleep -Milliseconds 500
                    } while($state -eq "Running")
                } -AsJob -ArgumentList @($script, $i, $splitTests[$i])

                $jobs.Add($job) | Out-Null
            }

            Write-Host Waiting for tests to finish
            $jobs | Receive-Job -Wait -AutoRemoveJob
            
            Write-Host Deleting VMs
            1..$numMachines | ForEach-Object -Parallel { 
              az vm delete -g ui-tests -n vm-ui-tests-$_ --force-deletion true --yes --force-deletion true --yes
            } -ThrottleLimit $numMachines
      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'VSTest'
          testResultsFiles: '*.trx'
          searchFolder: 'C:/Shared/'
          mergeTestResults: true
