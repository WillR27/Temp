# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none

pool:
   name: UITestPoolAzure

jobs:
  - job: Test
    steps:
      - task: AzureCLI@2
        inputs:
          azureSubscription: 'WR-VS'
          scriptType: 'pscore'
          scriptLocation: 'inlineScript'
          inlineScript: |
            $env:AZURE_DEVOPS_EXT_PAT = "$(System.AccessToken)"
            $numMachines = 4
            $sharedDirectory = "C:\Shared"
            $targetDirectory = "$sharedDirectory\Build"
            $uitestsDirectory = "${targetDirectory}\UITests"
            $vstest = "C:\Users\testuser\Desktop\TestPlatform\vstest.console.exe"


            Write-Host Getting ips
            $ips = [System.Collections.ArrayList]@()
            1..$numMachines | ForEach-Object { 
                $ip = az vm list-ip-addresses --resource-group test-resource-group --name vm-ui-tests-$_ --query [0].virtualMachine.network.privateIpAddresses[0] 
                $ips.Add($ip.Replace('"', ''))
            }

            Write-Host Trusting ips
            $ipsStr = $ips -join ','
            $ipsStr = '"' + $ipsStr + '"'
            winrm set winrm/config/client "@{TrustedHosts=$ipsStr}"

            Write-Host Installing MooD
            Invoke-Command -ComputerName $ips -ScriptBlock {
              Write-Host Installing MooD
              $InstallerFilename = "${targetDirectory}\MooD17.006.000_BusinessArchitectSetup.exe"
              $processStartInfo = new-object "Diagnostics.ProcessStartInfo"
              $processStartInfo.FileName = $InstallerFilename
              $processStartInfo.Arguments = "/quiet"
              $process = [Diagnostics.Process]::Start($processStartInfo)
              $process.WaitForExit();
              
              Write-Host Extracting CppTests
              Expand-Archive -LiteralPath "${targetDirectory}\CppTests.zip" -DestinationPath "C:\Program Files (x86)\MooD\17" -Force
              
              Write-Host Extracting UITests
              Expand-Archive -LiteralPath "${targetDirectory}\UITests.zip" -DestinationPath "C:\Program Files (x86)\MooD\17" -Force
            }

            Write-Host Running test
            Invoke-Command -ComputerName $ips -ScriptBlock {
              Start-ScheduledTask -TaskName "Run Tests"
              do{
                  $state = Get-ScheduledTask -TaskName "Run Tests"|select -expand State
                  Start-Sleep -Milliseconds 500
              } while($state -eq "Running")
            }
      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'VSTest'
          testResultsFiles: '*.trx'
          searchFolder: 'C:/Shared/'
          mergeTestResults: true
