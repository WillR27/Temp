# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none

pool:
   name: UITestPoolAzure

jobs:
  - job: Test
    steps:
      - task: AzureCLI@2
        inputs:
          azureSubscription: 'WR-VS'
          scriptType: 'pscore'
          scriptLocation: 'inlineScript'
          inlineScript: |
            $env:AZURE_DEVOPS_EXT_PAT = "$(System.AccessToken)"
            $numMachines = 4
            $sharedDirectory = "C:\Shared"
            $targetDirectory = "$sharedDirectory\Build"
            $targetDirectory2 = "\\10.0.0.4\Shared\Build"
            $uitestsDirectory = "${targetDirectory}\UITests"
            $vstest = "C:\Users\testuser\Desktop\TestPlatform\vstest.console.exe"


            Write-Host Splitting test names per machine
            $splitTests = @($null) * $numMachines
            1..$numMachines | ForEach-Object { $splitTests[$_ - 1] = [System.Collections.Generic.List[string]]::new() }
            0..($tests.Length - 1) | ForEach-Object { $splitTests[$_ % $numMachines].Add($tests[$_]) }
            0..($splitTests.Length - 1) | ForEach-Object { $splitTests[$_] = $splitTests[$_] -join '|' }


            Write-Host Getting ips
            $ips = [System.Collections.ArrayList]@()
            1..$numMachines | ForEach-Object { 
                $ip = az vm list-ip-addresses --resource-group test-resource-group --name vm-ui-tests-$_ --query [0].virtualMachine.network.privateIpAddresses[0] 
                $ips.Add($ip.Replace('"', ''))
            }

            Write-Host Trusting ips
            $ipsStr = $ips -join ','
            $ipsStr = '"' + $ipsStr + '"'
            winrm set winrm/config/client "@{TrustedHosts=$ipsStr}"

            $script = @"
            Write-Host Installing MooD
            Copy-item -Path "\\10.0.0.4\Shared\Build" -Destination "C:\Temp\Build" -Recurse

            `$installerFilename = "C:\Temp\Build\MooD17.006.000_BusinessArchitectSetup.exe"
            `$processStartInfo = new-object "Diagnostics.ProcessStartInfo"
            `$processStartInfo.FileName = `$installerFilename
            `$processStartInfo.Arguments = "/quiet"
            `$process = [Diagnostics.Process]::Start(`$processStartInfo)
            `$process.WaitForExit();
                          
            Write-Host Extracting CppTests
            Expand-Archive -LiteralPath "C:\Temp\Build\CppTests.zip" -DestinationPath "C:\Program Files (x86)\MooD\17" -Force
                          
            Write-Host Extracting UITests
            Expand-Archive -LiteralPath "C:\Temp\Build\UITests.zip" -DestinationPath "C:\Program Files (x86)\MooD\17" -Force

            Write-Host Installing licence
            [microsoft.win32.registry]::SetValue("HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\MooD International\Licence\17.0", "licencepath", "C:\Temp\Build\Internallicence.xml")

            Write-Host Creating rep
            & "C:\Program Files (x86)\MooD\17\MooDRepositoryManager.com" addserver /server localhost 
            & "C:\Program Files (x86)\MooD\17\MooDRepositoryManager.com" create /server "localhost" /name "17Test1a"

            Write-Host Running tests
            "@

            for ($i = 0; $i -lt $numMachines; $i++) {
                Invoke-Command -ComputerName $ips[$i] -ScriptBlock {
                    Out-File -FilePath C:\Users\testuser\Desktop\RunTests.ps1 -InputObject $args[0]
                    $i = $args[1]
                    $tests = $args[2]
                    $vstest = '& "C:\Users\testuser\Desktop\TestPlatform\vstest.console.exe" "C:\Program Files (x86)\MooD\17\Test_UI.dll" "/TestCaseFilter:' + "$tests" + '" "/Logger:trx;LogFileName=\\10.0.0.4\Shared\Tests_' + "$i" + '.trx"'
                    Add-Content -Path C:\Users\testuser\Desktop\RunTests.ps1 -Value $vstest

                    Start-ScheduledTask -TaskName "Run Tests"
                    do{
                        $state = Get-ScheduledTask -TaskName "Run Tests"|select -expand State
                        Start-Sleep -Milliseconds 500
                    } while($state -eq "Running")
                } -ArgumentList @($script, $i, $splitTests[$i])
            }
      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'VSTest'
          testResultsFiles: '*.trx'
          searchFolder: 'C:/Shared/'
          mergeTestResults: true
