# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none

pool:
   name: UITestPoolAzure

jobs:
  - job: Test
    steps:
      - task: AzureCLI@2
        inputs:
          azureSubscription: 'WR-VS'
          scriptType: 'pscore'
          scriptLocation: 'inlineScript'
          inlineScript: |
            $env:AZURE_DEVOPS_EXT_PAT = "$(System.AccessToken)"
            $numMachines = 4
            $sharedDirectory = "C:\Shared"
            $targetDirectory = "$sharedDirectory\Build"
            $uitestsDirectory = "${targetDirectory}\UITests"
            $vstest = "C:\Users\testuser\Desktop\TestPlatform\vstest.console.exe"

            Write-Host Deleting old files
            Get-ChildItem -Path $sharedDirectory | ForEach-Object -Process { 
              if($_.attributes -eq "Directory") {
                Remove-Item -Path $_.FullName -Recurse -Force
              } else {
                Remove-Item -Path $_.FullName -Force
              }
            }
            
            Remove-Item -Path $targetDirectory -Force -Recurse -ErrorAction Ignore
            $buildId = az pipelines runs list --org https://dev.azure.com/MooDPlatform/ --project MooD --query "[?definition.name=='MooD Trunk Nightly Build'].buildNumber | [0]"
            
            Write-Host Downloading build artifacts
            az pipelines runs artifact download --artifact-name CPPTestsZip --path $targetDirectory --run-id $buildId --org https://dev.azure.com/MooDPlatform/ --project MooD
            az pipelines runs artifact download --artifact-name UITestsZip --path $targetDirectory --run-id $buildId --org https://dev.azure.com/MooDPlatform/ --project MooD
            az pipelines runs artifact download --artifact-name MooD --path $targetDirectory --run-id $buildId --org https://dev.azure.com/MooDPlatform/ --project MooD
            
            Write-Host Extracting UITests locally
            Expand-Archive -LiteralPath "${targetDirectory}\UITests.zip" -DestinationPath $uitestsDirectory -Force

            Write-Host Listing test names
            & $vstest "${uitestsDirectory}\Test_UI.dll" /ListFullyQualifiedTests "/ListTestsTargetPath:${uitestsDirectory}\TestNames.txt"
            $tests = Get-Content "${uitestsDirectory}\TestNames.txt"

            Write-Host Splitting test names per machine
            $splitTests = @($null) * $numMachines
            1..$numMachines | ForEach-Object { $splitTests[$_ - 1] = [System.Collections.Generic.List[string]]::new() }
            0..($tests.Length - 1) | ForEach-Object { $splitTests[$_ % $numMachines].Add($tests[$_]) }
            0..($splitTests.Length - 1) | ForEach-Object { $splitTests[$_] = $splitTests[$_] -join '|' }

            Write-Host Creating VMs
            1..$numMachines | ForEach-Object -Parallel { 
              az vm create --resource-group test-resource-group --name vm-ui-tests-$_ --image "/subscriptions/1abd2ed2-8cfd-487a-8b4a-1feeb4498ccd/resourceGroups/test-resource-group/providers/Microsoft.Compute/galleries/testGallery/images/testDefinition2" --specialized --license-type Windows_Client --admin-password Ts0rg123_Ts0rg123 --admin-username testuser --security-type TrustedLaunch --size Standard_D2s_v3 --public-ip-address '""'
            } -ThrottleLimit $numMachines

            Write-Host Getting ips
            $ips = [System.Collections.ArrayList]@()
            1..$numMachines | ForEach-Object { 
                $ip = az vm list-ip-addresses --resource-group test-resource-group --name vm-ui-tests-$_ --query [0].virtualMachine.network.privateIpAddresses[0] 
                $ips.Add($ip.Replace('"', ''))
            }

            Start-Sleep -Seconds 120

            Write-Host Trusting ips
            $ipsStr = $ips -join ','
            $ipsStr = '"' + $ipsStr + '"'
            winrm set winrm/config/client "@{TrustedHosts=$ipsStr}"

            Write-Host Installing MooD
            Invoke-Command -ComputerName $ips -ScriptBlock {
              Write-Host Installing MooD
              $InstallerFilename = "${targetDirectory}MooD17.006.000_BusinessArchitectSetup.exe"
              $processStartInfo = new-object "Diagnostics.ProcessStartInfo"
              $processStartInfo.FileName = $InstallerFilename
              $processStartInfo.Arguments = "/quiet"
              $process = [Diagnostics.Process]::Start($processStartInfo)
              $process.WaitForExit();
              
              Write-Host Extracting CppTests
              Expand-Archive -LiteralPath "${targetDirectory}CppTests.zip" -DestinationPath "C:\Program Files (x86)\MooD\17" -Force
              
              Write-Host Extracting UITests
              Expand-Archive -LiteralPath "${targetDirectory}UITests.zip" -DestinationPath "C:\Program Files (x86)\MooD\17" -Force
            }

            Write-Host Running test
            Invoke-Command -ComputerName $ips -ScriptBlock {
              Start-ScheduledTask -TaskName "Run Tests"
              do{
                  $state = Get-ScheduledTask -TaskName "Run Tests"|select -expand State
                  Start-Sleep -Milliseconds 500
              } while($state -eq "Running")
            }
      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'VSTest'
          testResultsFiles: '*.trx'
          searchFolder: 'C:/Shared/'
          mergeTestResults: true
